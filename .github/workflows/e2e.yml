name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:

jobs:
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    env:
      PUBLIC_POSTHOG_KEY: ${{ vars.PUBLIC_POSTHOG_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      - name: Build application
        run: pnpm build

      - name: Run Playwright tests
        run: pnpm test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  e2e-comment:
    name: E2E Test Comment
    if: github.event_name == 'pull_request'
    needs: [e2e]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const e2eResult = '${{ needs.e2e.result }}';
            
            const getStatusEmoji = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏹️';
                case 'skipped': return '⏭️';
                default: return '⚠️';
              }
            };
            
            const getStatusText = (status) => {
              switch(status) {
                case 'success': return 'Passed';
                case 'failure': return 'Failed';
                case 'cancelled': return 'Cancelled';
                case 'skipped': return 'Skipped';
                default: return 'Unknown';
              }
            };
            
            const summary = e2eResult === 'success' ? 
              '🎭 **E2E tests passed!** Your app works correctly in real browsers.' : 
              '🚨 **E2E tests failed!** There may be issues with user workflows.';
            
            const comment = `## 🎭 E2E Test Results for PR #${context.issue.number}
            
            Hey 👋 @${context.payload.pull_request.user.login}! ${summary}
            
            ### Results:
            
            | Test Suite | Status | Description |
            |------------|--------|-----------|
            | ${getStatusEmoji(e2eResult)} **Playwright E2E** | ${getStatusText(e2eResult)} | End-to-end testing across Chrome, Firefox, Safari, and mobile browsers |
            
            ### What this covers:
            - **Browser Compatibility**: Tests your app in multiple browsers (Chrome, Firefox, Safari)
            - **User Workflows**: Simulates real user interactions with your PDF editor
            - **Mobile Experience**: Validates responsive design on mobile devices
            - **Full Integration**: Tests the complete user journey from UI to functionality
            
            ${e2eResult === 'failure' ? '💡 **Tip**: Check the uploaded Playwright report for detailed test failures and screenshots.' : ''}
            
            ---
            *This comment was automatically generated by the E2E workflow*`;
            
            // Check if we already have a comment from this workflow
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🎭 E2E Test Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
